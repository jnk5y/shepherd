#!/bin/bash
set -euo pipefail

server_version() {
  docker version -f "{{.Server.Version}}"
}

update_services() {
  local blacklist="$1"
  local supports_detach_option=$2
  local supports_registry_auth=$3
  local detach_option=""
  local registry_auth=""
  local name
 
  [ $supports_detach_option = true ] && detach_option="--detach=false"
  [ $supports_registry_auth = true ] && registry_auth="--with-registry-auth"

  for name in $(IFS=$'\n' docker service ls --quiet --filter "${FILTER_SERVICES}" --format '{{.Name}}'); do
    local image_with_digest image
    if [[ " $blacklist " != *" $name "* ]]; then
      image_with_digest="$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')"
      image=$(echo "$image_with_digest" | cut -d@ -f1)

      if ! DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $image > /dev/null; then
        echo "Error updating service $name! Image $image does not exist or it is not available"
      else
        #echo "Trying to update service $name with image $image"
        docker service update "$name" $detach_option $registry_auth --image="$image" > /dev/null

        previousImage=$(docker service inspect "$name" -f '{{.PreviousSpec.TaskTemplate.ContainerSpec.Image}}')
        currentImage=$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')
        if [ "$previousImage" == "$currentImage" ]; then
          #echo "No updates to service $name!"
        else
          echo "Service $name was updated!"
        fi
      fi
    fi
  done
}

main() {
  local blacklist sleep_time supports_detach_option supports_registry_auth
  blacklist="${BLACKLIST_SERVICES:-}"
  sleep_time="${SLEEP_TIME:-10m}"

  supports_detach_option=false
  if [[ "$(server_version)" > "17.05" ]]; then
    supports_detach_option=true
    echo "Enabling synchronous service updates"
  fi

  supports_registry_auth=false
  if [[ ${WITH_REGISTRY_AUTH+x} ]]; then
    supports_registry_auth=true
    echo "Send registry authentication details to swarm agents"
  fi

  [[ "$blacklist" != "" ]] && echo "Excluding services: $blacklist"

  while true; do
    update_services "$blacklist" "$supports_detach_option" "$supports_registry_auth"
    #echo "Sleeping $sleep_time before next update"
    sleep "$sleep_time"
  done
}

main "$@"
