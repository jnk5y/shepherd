#!/bin/bash
set -euo pipefail

server_version() {
  docker version -f "{{.Server.Version}}"
}

logger() {
  local log="$1"
  local is_verbose_log="${2:-false}"
  
  if [ ("$is_verbose_log"="true" && "$verbose"="true") || "$is_verbose_log"="false" ]; then
    echo "$(date) log"
  fi
}

update_services() {
  local blacklist="$1"
  local supports_detach_option=$2
  local supports_registry_auth=$3
  local detach_option=""
  local registry_auth=""
  local name
 
  [ $supports_detach_option = true ] && detach_option="--detach=false"
  [ $supports_registry_auth = true ] && registry_auth="--with-registry-auth"

  for name in $(IFS=$'\n' docker service ls --quiet --filter "${FILTER_SERVICES}" --format '{{.Name}}'); do
    local image_with_digest image
    if [[ " $blacklist " != *" $name "* ]]; then
      image_with_digest="$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')"
      image=$(echo "$image_with_digest" | cut -d@ -f1)

      if ! DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $image > /dev/null; then
      	logger "Error updating service $name! Image $image does not exist or it is not available"
      else
	logger "Trying to update service $name with image $image" "true"
        docker service update "$name" $detach_option $registry_auth --image="$image" > /dev/null

        previousImage=$(docker service inspect "$name" -f '{{.PreviousSpec.TaskTemplate.ContainerSpec.Image}}')
        currentImage=$(docker service inspect "$name" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')
        if [ "$previousImage" != "$currentImage" ]; then
          logger "Service $name was updated!"
	else
	  logger "No updates to service $name" "true"
        fi
      fi
    fi
  done
}

main() {
  local blacklist sleep_time supports_detach_option supports_registry_auth tz verbose
  blacklist="${BLACKLIST_SERVICES:-}"
  sleep_time="${SLEEP_TIME:-10m}"
  tz="${TZ:-EST}"
  verbose="${VERBOSE:-true}"

  echo $tz > /etc/timezone
  logger "Timezone set to $tz"

  supports_detach_option=false
  if [[ "$(server_version)" > "17.05" ]]; then
    supports_detach_option=true
    logger "Enabling synchronous service updates"
    logger "Sleep timer is set to $sleep_time"
  fi

  supports_registry_auth=false
  if [[ ${WITH_REGISTRY_AUTH+x} ]]; then
    supports_registry_auth=true
    logger "Send registry authentication details to swarm agents"
  fi

  [[ "$blacklist" != "" ]] && logger "Excluding services: $blacklist"

  while true; do
    update_services "$blacklist" "$supports_detach_option" "$supports_registry_auth"
    logger "Sleeping $sleep_time before next update" "true"
    sleep "$sleep_time"
  done
}

main "$@"
